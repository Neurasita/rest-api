// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queries.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
WITH gen_user_id AS (
    INSERT INTO users (id, email, password_hash)
    VALUES ($1, $2, $3)
    RETURNING
        id
)

INSERT INTO user_roles (user_id, role_id)
SELECT
    id AS user_id,
    $4 AS role_id
FROM
    gen_user_id
RETURNING
    user_id
`

type CreateUserParams struct {
	ID           pgtype.UUID
	Email        string
	PasswordHash string
	RoleID       pgtype.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.RoleID,
	)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE
    id = $1
    AND deleted_at IS NULL
RETURNING
    id
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id,
    email,
    created_at,
    updated_at
FROM
    users
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

type GetUserByIDRow struct {
	ID        pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCredsByEmail = `-- name: GetUserCredsByEmail :one
SELECT
    id,
    password_hash
FROM
    users
WHERE
    email = $1
    AND deleted_at IS NULL
LIMIT 1
`

type GetUserCredsByEmailRow struct {
	ID           pgtype.UUID
	PasswordHash string
}

func (q *Queries) GetUserCredsByEmail(ctx context.Context, email string) (GetUserCredsByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserCredsByEmail, email)
	var i GetUserCredsByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE
    users
SET
    email = $2
WHERE
    id = $1
    AND deleted_at IS NULL
RETURNING
    id
`

type UpdateUserEmailParams struct {
	ID    pgtype.UUID
	Email string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE
    users
SET
    password_hash = $2
WHERE
    id = $1
    AND deleted_at IS NULL
RETURNING
    id
`

type UpdateUserPasswordParams struct {
	ID           pgtype.UUID
	PasswordHash string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
