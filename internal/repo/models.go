// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repo

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Gender string

const (
	GenderM Gender = "m"
	GenderF Gender = "f"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type ImageClassification struct {
	ID         pgtype.UUID
	PlantID    pgtype.UUID
	DiseaseID  pgtype.UUID
	Hash       string
	Categories string
}

type Permission struct {
	ID string
}

type Pest struct {
	ID              pgtype.UUID
	ScitentificName string
}

type Plant struct {
	ID              pgtype.UUID
	ScitentificName string
}

type Profile struct {
	ID           pgtype.UUID
	UserID       pgtype.UUID
	FullName     pgtype.Text
	PhotoUrl     pgtype.Text
	Bio          pgtype.Text
	Gender       NullGender
	BirthDate    pgtype.Date
	Occupation   pgtype.Text
	Organization pgtype.Text
	Location     pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type Role struct {
	ID   pgtype.UUID
	Name string
}

type RolePermission struct {
	RoleID       pgtype.UUID
	PermissionID pgtype.UUID
}

type User struct {
	ID           pgtype.UUID
	Email        string
	PasswordHash string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type UserPermission struct {
	UserID       pgtype.UUID
	PermissionID pgtype.UUID
}

type UserRole struct {
	UserID pgtype.UUID
	RoleID pgtype.UUID
}
